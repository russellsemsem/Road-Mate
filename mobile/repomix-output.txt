This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  (auth)/
    _layout.tsx
    sign-in.tsx
    sign-up.tsx
  (home)/
    _layout.tsx
    data.ts
    index.tsx
    knowledge.tsx
    profile.tsx
  services/
    useElevenLabs.ts
  _layout.tsx
  +not-found.tsx
  test.ts
.gitignore
app.json
cache.ts
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: app/(auth)/_layout.tsx
================
import { Redirect, Stack } from 'expo-router'
import { useAuth } from '@clerk/clerk-expo'

export default function AuthRoutesLayout() {
  const { isSignedIn } = useAuth()

  if (isSignedIn) {
    return <Redirect href={'/'} />
  }

  return <Stack />
}

================
File: app/(auth)/sign-in.tsx
================
import { useSignIn } from '@clerk/clerk-expo'
import { Link, useRouter } from 'expo-router'
import { Text, TextInput, Button, View } from 'react-native'
import React from 'react'

export default function Page() {
  const { signIn, setActive, isLoaded } = useSignIn()
  const router = useRouter()

  const [emailAddress, setEmailAddress] = React.useState('')
  const [password, setPassword] = React.useState('')

  // Handle the submission of the sign-in form
  const onSignInPress = async () => {
    if (!isLoaded) return

    // Start the sign-in process using the email and password provided
    try {
      const signInAttempt = await signIn.create({
        identifier: emailAddress,
        password,
      })

      // If sign-in process is complete, set the created session as active
      // and redirect the user
      if (signInAttempt.status === 'complete') {
        await setActive({ session: signInAttempt.createdSessionId })
        router.replace('/')
      } else {
        // If the status isn't complete, check why. User might need to
        // complete further steps.
        console.error(JSON.stringify(signInAttempt, null, 2))
      }
    } catch (err) {
      // See https://clerk.com/docs/custom-flows/error-handling
      // for more info on error handling
      console.error(JSON.stringify(err, null, 2))
    }
  }

  return (
    <View>
      <TextInput
        autoCapitalize="none"
        value={emailAddress}
        placeholder="Enter email"
        onChangeText={(emailAddress) => setEmailAddress(emailAddress)}
      />
      <TextInput
        value={password}
        placeholder="Enter password"
        secureTextEntry={true}
        onChangeText={(password) => setPassword(password)}
      />
      <Button title="Sign in" onPress={onSignInPress} />
      <View>
        <Text>Don't have an account?</Text>
        <Link href="/sign-up">
          <Text>Sign up</Text>
        </Link>
      </View>
    </View>
  )
}

================
File: app/(auth)/sign-up.tsx
================
import * as React from 'react'
import { Text, TextInput, Button, View } from 'react-native'
import { useSignUp } from '@clerk/clerk-expo'
import { useRouter } from 'expo-router'

export default function SignUpScreen() {
  const { isLoaded, signUp, setActive } = useSignUp()
  const router = useRouter()

  const [emailAddress, setEmailAddress] = React.useState('')
  const [password, setPassword] = React.useState('')
  const [pendingVerification, setPendingVerification] = React.useState(false)
  const [code, setCode] = React.useState('')

  // Handle submission of sign-up form
  const onSignUpPress = async () => {
    if (!isLoaded) return

    // Start sign-up process using email and password provided
    try {
      await signUp.create({
        emailAddress,
        password,
      })

      // Send user an email with verification code
      await signUp.prepareEmailAddressVerification({ strategy: 'email_code' })

      // Set 'pendingVerification' to true to display second form
      // and capture OTP code
      setPendingVerification(true)
    } catch (err) {
      // See https://clerk.com/docs/custom-flows/error-handling
      // for more info on error handling
      console.error(JSON.stringify(err, null, 2))
    }
  }

  // Handle submission of verification form
  const onVerifyPress = async () => {
    if (!isLoaded) return

    try {
      // Use the code the user provided to attempt verification
      const signUpAttempt = await signUp.attemptEmailAddressVerification({
        code,
      })

      // If verification was completed, set the session to active
      // and redirect the user
      if (signUpAttempt.status === 'complete') {
        await setActive({ session: signUpAttempt.createdSessionId })
        router.replace('/')
      } else {
        // If the status is not complete, check why. User may need to
        // complete further steps.
        console.error(JSON.stringify(signUpAttempt, null, 2))
      }
    } catch (err) {
      // See https://clerk.com/docs/custom-flows/error-handling
      // for more info on error handling
      console.error(JSON.stringify(err, null, 2))
    }
  }

  if (pendingVerification) {
    return (
      <>
        <Text>Verify your email</Text>
        <TextInput
          value={code}
          placeholder="Enter your verification code"
          onChangeText={(code) => setCode(code)}
        />
        <Button title="Verify" onPress={onVerifyPress} />
      </>
    )
  }

  return (
    <View>
      <>
        <Text>Sign up</Text>
        <TextInput
          autoCapitalize="none"
          value={emailAddress}
          placeholder="Enter email"
          onChangeText={(email) => setEmailAddress(email)}
        />
        <TextInput
          value={password}
          placeholder="Enter password"
          secureTextEntry={true}
          onChangeText={(password) => setPassword(password)}
        />
        <Button title="Continue" onPress={onSignUpPress} />
      </>
    </View>
  )
}

================
File: app/(home)/_layout.tsx
================
// app/(home)/_layout.tsx
import { Tabs } from 'expo-router/tabs'
import { Book, Circle, User } from 'lucide-react-native'
import { View } from 'react-native'
import { useAuth } from '@clerk/clerk-expo'
import { Redirect } from 'expo-router'

export default function HomeLayout() {
  const { isSignedIn } = useAuth()

  // If not signed in, redirect to sign in page
  if (!isSignedIn) {
    return <Redirect href="/(auth)/sign-in" />
  }

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: '#000',
        tabBarInactiveTintColor: '#666',
        tabBarStyle: {
          height: 60,
          paddingBottom: 8,
          paddingTop: 8,
        },
        headerShown: false,
      }}>
      <Tabs.Screen
        name="knowledge"
        options={{
          title: '',
          tabBarIcon: ({ color }) => <Book size={24} color={color} />,
        }}
      />
      <Tabs.Screen
        name="index"
        options={{
          title: '',
          href: '/',
          headerShown: false,
          tabBarIcon: () => (
            <View
              style={{
                width: 60,
                height: 60,
                backgroundColor: '#000',
                borderRadius: 30,
                justifyContent: 'center',
                alignItems: 'center',
                marginBottom: 20,
                shadowColor: '#000',
                shadowOffset: {
                  width: 0,
                  height: 2,
                },
                shadowOpacity: 0.25,
                shadowRadius: 3.84,
                elevation: 5,
              }}>
              <Circle size={30} color="#fff" />
            </View>
          ),
          tabBarIconStyle: {
            marginBottom: -20,
          },
        }}
      />
      <Tabs.Screen
        name="profile"
        options={{
          title: '',
          tabBarIcon: ({ color }) => <User size={24} color={color} />,
        }}
      />
    </Tabs>
  )
}

================
File: app/(home)/data.ts
================
// app/(home)/data.ts
export interface Contact {
  name: string;
  relationship: string;
  "phone-number": string;
}

export const data = {
  "contacts": [
    {
      "name": "Sarah Chen",
      "relationship": "Sister",
      "phone-number": "+1 (555) 123-4567"
    },
    {
      "name": "Michael Rodriguez",
      "relationship": "Best Friend",
      "phone-number": "+1 (555) 234-5678"
    },
    {
      "name": "Emma Thompson",
      "relationship": "Mom",
      "phone-number": "+1 (555) 345-6789"
    },
    {
      "name": "David Park",
      "relationship": "College Friend",
      "phone-number": "+1 (555) 456-7890"
    },
    {
      "name": "Lisa Anderson",
      "relationship": "Cousin",
      "phone-number": "+1 (555) 567-8901"
    }
  ],
  "topics": [
    "Basketball",
    "Astrology",
    "Space",
    "History",
    "Music",
    "Cooking",
    "Technology",
    "Mental Health"
  ]
} as const;

================
File: app/(home)/index.tsx
================
import { SignedIn, SignedOut, useUser } from '@clerk/clerk-expo'
import { Link } from 'expo-router'
import { Text, View } from 'react-native'

export default function Page() {
  const { user } = useUser()

  return (
    <View>
      <SignedIn>
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
            <Text>Roadmate Screen</Text>
        </View>
      </SignedIn>
      
      <SignedOut>
        <Link href="/(auth)/sign-in">
          <Text>Sign in</Text>
        </Link>
        <Link href="/(auth)/sign-up">
          <Text>Sign up</Text>
        </Link>
      </SignedOut>
    </View>
  )
}

================
File: app/(home)/knowledge.tsx
================
// app/(home)/knowledge.tsx
import { View, Text, ScrollView, TouchableOpacity } from 'react-native'
import { data } from './data'
import { Phone, Tag, ChevronRight } from 'lucide-react-native'

export default function KnowledgeScreen() {
  return (
    <ScrollView style={{ flex: 1, backgroundColor: '#fff', padding: 30 }}>
      {/* Header */}
      <View style={{ padding: 20 }}>
        <Text style={{ fontSize: 28, fontWeight: '600', marginBottom: 10 }}>Knowledge</Text>
        <Text style={{ fontSize: 16, color: '#666' }}>
          Manage your contacts and topics of interest
        </Text>
      </View>

      {/* Contacts Section */}
      <View style={{ paddingHorizontal: 20, marginBottom: 30 }}>
        <Text style={{ 
          fontSize: 20, 
          fontWeight: '600', 
          marginBottom: 15,
          color: '#333' 
        }}>
          Your Contacts
        </Text>
        
        {data.contacts.map((contact, index) => (
          <TouchableOpacity
            key={index}
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              paddingHorizontal: 15,
              backgroundColor: '#f8f9fa',
              borderRadius: 12,
              marginBottom: 10,
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 1 },
              shadowOpacity: 0.1,
              shadowRadius: 2,
              elevation: 2,
            }}>
            {/* Contact Circle */}
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#e9ecef',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 12
            }}>
              <Text style={{ fontSize: 18, fontWeight: '500' }}>
                {contact.name[0]}
              </Text>
            </View>

            {/* Contact Info */}
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500', marginBottom: 4 }}>
                {contact.name}
              </Text>
              <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                <Text style={{ fontSize: 14, color: '#666', marginRight: 12 }}>
                  {contact.relationship}
                </Text>
                <Phone size={14} color="#666" />
              </View>
            </View>

            <ChevronRight size={20} color="#666" />
          </TouchableOpacity>
        ))}
      </View>

      {/* Topics Section */}
      <View style={{ paddingHorizontal: 20, marginBottom: 30 }}>
        <Text style={{ 
          fontSize: 20, 
          fontWeight: '600', 
          marginBottom: 15,
          color: '#333' 
        }}>
          Your Topics
        </Text>

        <View style={{ 
          flexDirection: 'row', 
          flexWrap: 'wrap', 
          gap: 10 
        }}>
          {data.topics.map((topic, index) => (
            <TouchableOpacity
              key={index}
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                paddingVertical: 8,
                paddingHorizontal: 12,
                backgroundColor: '#f1f3f5',
                borderRadius: 20,
                gap: 6
              }}>
              <Tag size={16} color="#666" />
              <Text style={{ 
                fontSize: 14, 
                color: '#495057',
                fontWeight: '500'
              }}>
                {topic}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>
    </ScrollView>
  )
}

================
File: app/(home)/profile.tsx
================
// app/(home)/profile.tsx
import { View, Text, Button, ScrollView, TouchableOpacity, Image } from 'react-native'
import { useAuth, useUser } from '@clerk/clerk-expo'
import { useRouter } from 'expo-router'
import { Mail, Phone, Plus, X } from 'lucide-react-native'

export default function ProfileScreen() {
  const { signOut } = useAuth()
  const { user } = useUser()
  const router = useRouter()
  
  const handleSignOut = async () => {
    try {
      await signOut()
      router.replace('/(auth)/sign-in')
    } catch (err) {
      console.error('Error signing out:', err)
    }
  }

  return (
    <ScrollView style={{ flex: 1, backgroundColor: '#fff', paddingTop:40 }}>
      {/* Header */}
      <View style={{ padding: 20 }}>
        <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 }}>
          <Text style={{ fontSize: 28, fontWeight: '600' }}>Your Profile</Text>
          <TouchableOpacity>
            {/* <X size={24} color="#000" /> */}
          </TouchableOpacity>
        </View>
        {/* <Text style={{ color: '#666', fontSize: 16 }}>Manage your account info.</Text> */}
      </View>

      {/* Navigation Menu */}
      {/* <View style={{ paddingHorizontal: 20 }}>
        <TouchableOpacity
          style={{
            backgroundColor: '#f0f0f0',
            padding: 12,
            borderRadius: 8,
            marginBottom: 8,
          }}>
          <Text style={{ fontSize: 16, fontWeight: '500' }}>Profile</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={{
            padding: 12,
            borderRadius: 8,
          }}>
          <Text style={{ fontSize: 16, color: '#666' }}>Security</Text>
        </TouchableOpacity>
      </View> */}

      {/* Profile Section */}
      <View style={{ padding: 20 }}>
        {/* <Text style={{ fontSize: 20, fontWeight: '500', marginBottom: 20 }}>Profile details</Text> */}
        
        <View style={{ marginBottom: 30 }}>
          {/* <Text style={{ fontSize: 18, fontWeight: '500', marginBottom: 15 }}>Profile</Text> */}
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              {user?.imageUrl ? (
                <Image
                  source={{ uri: user.imageUrl }}
                  style={{ width: 50, height: 50, borderRadius: 25, marginRight: 15 }}
                />
              ) : (
                <View style={{ width: 50, height: 50, borderRadius: 25, backgroundColor: '#f0f0f0', marginRight: 15 }} />
              )}
              <Text style={{ fontSize: 16 }}>{user?.fullName}</Text>
            </View>
            <TouchableOpacity>
              <Text style={{ color: '#000', fontSize: 16 }}>Edit profile</Text>
            </TouchableOpacity>
          </View>
        </View>

        {/* Email Section */}
        <View style={{ marginBottom: 30 }}>
          <Text style={{ fontSize: 18, fontWeight: '500', marginBottom: 15 }}>Email addresses</Text>
          {user?.emailAddresses.map((email, index) => (
            <View key={index} style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>
              <Mail size={20} color="#666" style={{ marginRight: 10 }} />
              <View>
                <Text style={{ fontSize: 16 }}>{email.emailAddress}</Text>
                {email.id === user.primaryEmailAddressId && (
                  <Text style={{ color: '#666', fontSize: 14 }}>Primary</Text>
                )}
              </View>
            </View>
          ))}
          <TouchableOpacity style={{ flexDirection: 'row', alignItems: 'center', marginTop: 10 }}>
            <Plus size={20} color="#000" style={{ marginRight: 10 }} />
            <Text style={{ color: '#000', fontSize: 16 }}>Add email address</Text>
          </TouchableOpacity>
        </View>

        {/* Phone Section */}
        <View style={{ marginBottom: 30 }}>
          <Text style={{ fontSize: 18, fontWeight: '500', marginBottom: 15 }}>Phone number</Text>
          {user?.phoneNumbers.map((phone, index) => (
            <View key={index} style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>
              <Phone size={20} color="#666" style={{ marginRight: 10 }} />
              <View>
                <Text style={{ fontSize: 16 }}>{phone.phoneNumber}</Text>
                {phone.id === user.primaryPhoneNumberId && (
                  <Text style={{ color: '#666', fontSize: 14 }}>Primary</Text>
                )}
              </View>
            </View>
          ))}
          <TouchableOpacity style={{ flexDirection: 'row', alignItems: 'center', marginTop: 10 }}>
            <Plus size={20} color="#000" style={{ marginRight: 10 }} />
            <Text style={{ color: '#000', fontSize: 16 }}>Add phone number</Text>
          </TouchableOpacity>
        </View>

        {/* Sign Out Button */}
        <TouchableOpacity
          onPress={handleSignOut}
          style={{
            backgroundColor: '#f0f0f0',
            padding: 15,
            borderRadius: 8,
            alignItems: 'center',
            marginTop: 20,
          }}>
          <Text style={{ color: '#ff4444', fontSize: 16, fontWeight: '500' }}>Sign Out</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  )
}

================
File: app/services/useElevenLabs.ts
================
// services/useElevenLabs.ts

import { data } from '../(home)/data';

interface ApiResponse {
  success: boolean;
  data?: any;
  error?: string;
}

export const useElevenLabs = () => {
    const ELEVEN_LABS_API_KEY = process.env.EXPO_ELEVENLABS_API_KEY;
    const ELEVEN_LABS_AGENT_ID = process.env.EXPO_ELEVENLABS_AGENT_ID;
    const uploadKnowledgeBase = async (): Promise<ApiResponse> => {
        try {
        const form = new FormData();
        
        // Convert our data object to a JSON string and append it as a file
        const jsonBlob = new Blob([JSON.stringify(data)], { type: 'application/json' });
        form.append('file', jsonBlob, 'data.json');
        form.append('url', '');

        const response = await fetch('https://api.elevenlabs.io/v1/convai/knowledge-base', {
            method: 'POST',
            headers: {
            'xi-api-key': ELEVEN_LABS_API_KEY
            } as HeadersInit,
            body: form
        });

        const responseData = await response.json();
        return { success: true, data: responseData };
        } catch (error) {
        return {
            success: false,
            error: error instanceof Error ? error.message : 'Failed to upload knowledge base'
        };
        }
    };

    const updateAgent = async (): Promise<ApiResponse> => {
        try {
        const response = await fetch(`https://api.elevenlabs.io/v1/convai/agents/${ELEVEN_LABS_AGENT_ID}`, {
            method: 'PATCH',
            headers: {
            'xi-api-key': ELEVEN_LABS_API_KEY,
            'Content-Type': 'application/json'
            } as HeadersInit,
            body: '{}'
        });

        const responseData = await response.json();
        return { success: true, data: responseData };
        } catch (error) {
        return {
            success: false,
            error: error instanceof Error ? error.message : 'Failed to update agent'
        };
        }
    };

    const processKnowledgeBase = async (): Promise<ApiResponse> => {
        try {
        // Step 1: Upload knowledge base
        const uploadResult = await uploadKnowledgeBase();
        if (!uploadResult.success) {
            return uploadResult;
        }

        // Step 2: Update agent
        const updateResult = await updateAgent();
        return updateResult;

        } catch (error) {
        return {
            success: false,
            error: error instanceof Error ? error.message : 'Process failed'
        };
        }
    };

    return { processKnowledgeBase };
};

================
File: app/_layout.tsx
================
import { tokenCache } from '@/cache'
import { ClerkProvider, ClerkLoaded } from '@clerk/clerk-expo'
import { Slot } from 'expo-router'

export default function RootLayout() {
  const publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY!

  if (!publishableKey) {
    throw new Error('Add EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY in your .env')
  }

  return (
    <ClerkProvider tokenCache={tokenCache} publishableKey={publishableKey}>
      <ClerkLoaded>
        <Slot />
      </ClerkLoaded>
    </ClerkProvider>
  )
}

================
File: app/+not-found.tsx
================
import { Link, Stack } from 'expo-router';
import { StyleSheet, Text, View } from 'react-native';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <View style={styles.container}>
        <Text>This screen doesn't exist.</Text>
        <Link href="/" style={styles.link}>
          <Text>Go to home screen!</Text>
        </Link>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

================
File: app/test.ts
================
// test.ts
import dotenv from 'dotenv';
import { useElevenLabs } from './services/useElevenLabs';

// Load environment variables from .env file
dotenv.config();

async function test() {
    // Debug: Log the actual values (first few characters only for security)
    const apiKey = process.env.EXPO_ELEVENLABS_API_KEY;
    const agentId = process.env.EXPO_ELEVENLABS_AGENT_ID;
    
    console.log('API Key:', apiKey ? `${apiKey.substring(0, 4)}...` : 'not found');
    console.log('Agent ID:', agentId ? `${agentId.substring(0, 4)}...` : 'not found');

    if (!apiKey || !agentId) {
        console.error('Environment variables are not properly loaded!');
        return;
    }
    
    const elevenLabs = useElevenLabs();
    console.log('Testing ElevenLabs API...');
    
    try {
        const result = await elevenLabs.processKnowledgeBase();
        console.log('Result:', result);
    } catch (error) {
        console.error('Error:', error);
    }
}

test();

================
File: .gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example

================
File: app.json
================
{
  "expo": {
    "name": "mobile",
    "slug": "mobile",
    "version": "1.0.0",
    "orientation": "portrait",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "bundler": "metro",
      "output": "static"
    },
    "plugins": [
      "expo-router"
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}

================
File: cache.ts
================
import * as SecureStore from 'expo-secure-store'
import { Platform } from 'react-native'
import { TokenCache } from '@clerk/clerk-expo/dist/cache'

const createTokenCache = (): TokenCache => {
  return {
    getToken: async (key: string) => {
      try {
        const item = await SecureStore.getItemAsync(key)
        if (item) {
          console.log(`${key} was used 🔐 \n`)
        } else {
          console.log('No values stored under key: ' + key)
        }
        return item
      } catch (error) {
        console.error('secure store get item error: ', error)
        await SecureStore.deleteItemAsync(key)
        return null
      }
    },
    saveToken: (key: string, token: string) => {
      return SecureStore.setItemAsync(key, token)
    },
  }
}

// SecureStore is not supported on the web
export const tokenCache = Platform.OS !== 'web' ? createTokenCache() : undefined

================
File: package.json
================
{
  "name": "mobile",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@clerk/clerk-expo": "^2.7.8",
    "@clerk/types": "^4.46.1",
    "dotenv": "^16.4.7",
    "expo": "~52.0.37",
    "expo-constants": "~17.0.7",
    "expo-linking": "~7.0.5",
    "expo-router": "~4.0.17",
    "expo-secure-store": "^14.0.1",
    "expo-status-bar": "~2.0.1",
    "expo-web-browser": "~14.0.2",
    "lucide-react": "^0.475.0",
    "lucide-react-native": "^0.475.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.7",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-web": "~0.19.13"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.4",
    "react-test-renderer": "18.3.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3"
  },
  "private": true
}

================
File: README.md
================
# Welcome to your Expo app 👋

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).

## Get started

1. Install dependencies

   ```bash
   npm install
   ```

2. Start the app

   ```bash
    npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).

## Get a fresh project

When you're ready, run:

```bash
npm run reset-project
```

This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.

## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.

================
File: tsconfig.json
================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}



================================================================
End of Codebase
================================================================
